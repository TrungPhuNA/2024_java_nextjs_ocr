"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/jsvectormap";
exports.ids = ["vendor-chunks/jsvectormap"];
exports.modules = {

/***/ "(ssr)/./node_modules/jsvectormap/dist/js/jsvectormap.min.js":
/*!*************************************************************!*\
  !*** ./node_modules/jsvectormap/dist/js/jsvectormap.min.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\n!function(t, e) {\n     true ? module.exports = e() : 0;\n}(void 0, function() {\n    \"use strict\";\n    function t(t, i) {\n        t.prototype = Object.create(i.prototype), t.prototype.constructor = t, e(t, i);\n    }\n    function e(t, i) {\n        return e = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, e) {\n            return t.__proto__ = e, t;\n        }, e(t, i);\n    }\n    function i(t) {\n        if (void 0 === t) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n        return t;\n    }\n    function s(t) {\n        throw new TypeError('\"' + t + '\" is read-only');\n    }\n    function a(t, e) {\n        (null == e || e > t.length) && (e = t.length);\n        for(var i = 0, s = new Array(e); i < e; i++)s[i] = t[i];\n        return s;\n    }\n    function n(t, e) {\n        var i = \"undefined\" != typeof Symbol && t[Symbol.iterator] || t[\"@@iterator\"];\n        if (i) return (i = i.call(t)).next.bind(i);\n        if (Array.isArray(t) || (i = function(t, e) {\n            if (t) {\n                if (\"string\" == typeof t) return a(t, e);\n                var i = Object.prototype.toString.call(t).slice(8, -1);\n                return \"Object\" === i && t.constructor && (i = t.constructor.name), \"Map\" === i || \"Set\" === i ? Array.from(t) : \"Arguments\" === i || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i) ? a(t, e) : void 0;\n            }\n        }(t)) || e && t && \"number\" == typeof t.length) {\n            i && (t = i);\n            var s = 0;\n            return function() {\n                return s >= t.length ? {\n                    done: !0\n                } : {\n                    done: !1,\n                    value: t[s++]\n                };\n            };\n        }\n        throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n    }\n    Element.prototype.matches || (Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function(t) {\n        for(var e = (this.document || this.ownerDocument).querySelectorAll(t), i = e.length; s(\"i\") >= 0 && e.item(i) !== this;);\n        return i > -1;\n    }), Object.assign || Object.defineProperty(Object, \"assign\", {\n        enumerable: !1,\n        configurable: !0,\n        writable: !0,\n        value: function(t) {\n            if (null == t) throw new TypeError(\"Cannot convert first argument to object\");\n            for(var e = Object(t), i = 1; i < arguments.length; i++){\n                var s = arguments[i];\n                if (null != s) {\n                    s = Object(s);\n                    for(var a = Object.keys(Object(s)), n = 0, r = a.length; n < r; n++){\n                        var o = a[n], h = Object.getOwnPropertyDescriptor(s, o);\n                        void 0 !== h && h.enumerable && (e[o] = s[o]);\n                    }\n                }\n            }\n            return e;\n        }\n    });\n    var r = function(t) {\n        return function(t) {\n            return !!t && \"object\" == typeof t;\n        }(t) && !function(t) {\n            var e = Object.prototype.toString.call(t);\n            return \"[object RegExp]\" === e || \"[object Date]\" === e || function(t) {\n                return t instanceof Node;\n            }(t) || function(t) {\n                return t.$$typeof === o;\n            }(t);\n        }(t);\n    };\n    var o = \"function\" == typeof Symbol && Symbol.for ? Symbol.for(\"react.element\") : 60103;\n    function h(t, e) {\n        return !1 !== e.clone && e.isMergeableObject(t) ? d((i = t, Array.isArray(i) ? [] : {}), t, e) : t;\n        var i;\n    }\n    function l(t, e, i) {\n        return t.concat(e).map(function(t) {\n            return h(t, i);\n        });\n    }\n    function c(t) {\n        return Object.keys(t).concat(function(t) {\n            return Object.getOwnPropertySymbols ? Object.getOwnPropertySymbols(t).filter(function(e) {\n                return t.propertyIsEnumerable(e);\n            }) : [];\n        }(t));\n    }\n    function u(t, e) {\n        try {\n            return e in t;\n        } catch (t) {\n            return !1;\n        }\n    }\n    function p(t, e, i) {\n        var s = {};\n        return i.isMergeableObject(t) && c(t).forEach(function(e) {\n            s[e] = h(t[e], i);\n        }), c(e).forEach(function(a) {\n            (function(t, e) {\n                return u(t, e) && !(Object.hasOwnProperty.call(t, e) && Object.propertyIsEnumerable.call(t, e));\n            })(t, a) || (u(t, a) && i.isMergeableObject(e[a]) ? s[a] = (function(t, e) {\n                if (!e.customMerge) return d;\n                var i = e.customMerge(t);\n                return \"function\" == typeof i ? i : d;\n            })(a, i)(t[a], e[a], i) : s[a] = h(e[a], i));\n        }), s;\n    }\n    var d = function(t, e, i) {\n        (i = i || {}).arrayMerge = i.arrayMerge || l, i.isMergeableObject = i.isMergeableObject || r, i.cloneUnlessOtherwiseSpecified = h;\n        var s = Array.isArray(e);\n        return s === Array.isArray(t) ? s ? i.arrayMerge(t, e, i) : p(t, e, i) : h(e, i);\n    }, f = function(t) {\n        return \"object\" == typeof t && void 0 !== t.nodeType ? t : \"string\" == typeof t ? document.querySelector(t) : null;\n    }, m = function(t, e, i, s) {\n        void 0 === s && (s = !1);\n        var a = document.createElement(t);\n        return i && (a[s ? \"innerHTML\" : \"textContent\"] = i), e && (a.className = e), a;\n    }, g = function(t) {\n        t.parentNode.removeChild(t);\n    }, v = function(t, e, i) {\n        return void 0 === i && (i = !1), i ? d(t, e) : Object.assign(t, e);\n    }, _ = function(t, e) {\n        return t.toLowerCase() + \":to:\" + e.toLowerCase();\n    }, y = function(t, e) {\n        Object.assign(t.prototype, e);\n    }, b = {}, w = 1, S = {\n        on: function(t, e, i, s) {\n            void 0 === s && (s = {});\n            var a = \"jvm:\" + e + \"::\" + w++;\n            b[a] = {\n                selector: t,\n                handler: i\n            }, i._uid = a, t.addEventListener(e, i, s);\n        },\n        delegate: function(t, e, i, s) {\n            (e = e.split(\" \")).forEach(function(e) {\n                S.on(t, e, function(t) {\n                    var e = t.target;\n                    e.matches(i) && s.call(e, t);\n                });\n            });\n        },\n        off: function(t, e, i) {\n            var s = e.split(\":\")[1];\n            t.removeEventListener(s, i), delete b[i._uid];\n        },\n        flush: function() {\n            Object.keys(b).forEach(function(t) {\n                S.off(b[t].selector, t, b[t].handler);\n            });\n        },\n        getEventRegistry: function() {\n            return b;\n        }\n    };\n    var k = {\n        onLoaded: \"map:loaded\",\n        onViewportChange: \"viewport:changed\",\n        onRegionClick: \"region:clicked\",\n        onMarkerClick: \"marker:clicked\",\n        onRegionSelected: \"region:selected\",\n        onMarkerSelected: \"marker:selected\",\n        onRegionTooltipShow: \"region.tooltip:show\",\n        onMarkerTooltipShow: \"marker.tooltip:show\",\n        onDestroyed: \"map:destroyed\"\n    }, M = function(t, e, i) {\n        var s = f(e), a = -1 === s.getAttribute(\"class\").indexOf(\"jvm-region\") ? \"marker\" : \"region\", n = \"region\" === a, r = n ? s.getAttribute(\"data-code\") : s.getAttribute(\"data-index\"), o = n ? k.onRegionSelected : k.onMarkerSelected;\n        return i && (o = n ? k.onRegionTooltipShow : k.onMarkerTooltipShow), {\n            type: a,\n            code: r,\n            event: o,\n            element: n ? t.regions[r].element : t._markers[r].element,\n            tooltipText: n ? t._mapData.paths[r].name || \"\" : t._markers[r].config.name || \"\"\n        };\n    };\n    var x = function() {\n        function t() {}\n        return t.prototype.dispose = function() {\n            this._tooltip ? g(this._tooltip) : this.shape.remove();\n            for(var t, e = n(Object.getOwnPropertyNames(this)); !(t = e()).done;){\n                this[t.value] = null;\n            }\n        }, t;\n    }(), j = {\n        getLabelText: function(t, e) {\n            if (e) {\n                if (\"function\" == typeof e.render) {\n                    var i = [];\n                    return this.config && this.config.marker && i.push(this.config.marker), i.push(t), e.render.apply(this, i);\n                }\n                return t;\n            }\n        },\n        getLabelOffsets: function(t, e) {\n            return \"function\" == typeof e.offsets ? e.offsets(t) : Array.isArray(e.offsets) ? e.offsets[t] : [\n                0,\n                0\n            ];\n        },\n        setStyle: function(t, e) {\n            this.shape.setStyle(t, e);\n        },\n        remove: function() {\n            this.shape.remove(), this.label && this.label.remove();\n        },\n        hover: function(t) {\n            this._setStatus(\"isHovered\", t);\n        },\n        select: function(t) {\n            this._setStatus(\"isSelected\", t);\n        },\n        _setStatus: function(t, e) {\n            this.shape[t] = e, this.shape.updateStyle(), this[t] = e, this.label && (this.label[t] = e, this.label.updateStyle());\n        }\n    }, C = function(e) {\n        function i(t) {\n            var i, s = t.map, a = t.code, n = t.path, r = t.style, o = t.label, h = t.labelStyle, l = t.labelsGroup;\n            (i = e.call(this) || this)._map = s, i.shape = i._createRegion(n, a, r);\n            var c = i.getLabelText(a, o);\n            if (o && c) {\n                var u = i.shape.getBBox(), p = i.getLabelOffsets(a, o);\n                i.labelX = u.x + u.width / 2 + p[0], i.labelY = u.y + u.height / 2 + p[1], i.label = i._map.canvas.createText({\n                    text: c,\n                    textAnchor: \"middle\",\n                    alignmentBaseline: \"central\",\n                    dataCode: a,\n                    x: i.labelX,\n                    y: i.labelY\n                }, h, l), i.label.addClass(\"jvm-region jvm-element\");\n            }\n            return i;\n        }\n        t(i, e);\n        var s = i.prototype;\n        return s._createRegion = function(t, e, i) {\n            return (t = this._map.canvas.createPath({\n                d: t,\n                dataCode: e\n            }, i)).addClass(\"jvm-region jvm-element\"), t;\n        }, s.updateLabelPosition = function() {\n            this.label && this.label.set({\n                x: this.labelX * this._map.scale + this._map.transX * this._map.scale,\n                y: this.labelY * this._map.scale + this._map.transY * this._map.scale\n            });\n        }, i;\n    }(x);\n    y(C, j);\n    var L = function(e) {\n        function i(t) {\n            var i, s = t.index, a = t.map, n = t.style, r = t.x1, o = t.y1, h = t.x2, l = t.y2, c = t.group, u = t.config;\n            return (i = e.call(this) || this).config = u, i.shape = a.canvas.createLine({\n                x1: r,\n                y1: o,\n                x2: h,\n                y2: l,\n                dataIndex: s\n            }, n, c), i.shape.addClass(\"jvm-line\"), i;\n        }\n        return t(i, e), i.prototype.setStyle = function(t, e) {\n            this.shape.setStyle(t, e);\n        }, i;\n    }(x);\n    var O = function(e) {\n        function i(t) {\n            var i, s = t.index, a = t.style, n = t.label, r = t.cx, o = t.cy, h = t.map, l = t.group;\n            return (i = e.call(this) || this)._map = h, i._isImage = !!a.initial.image, i.config = arguments[0], i.shape = h.canvas[i._isImage ? \"createImage\" : \"createCircle\"]({\n                dataIndex: s,\n                cx: r,\n                cy: o\n            }, a, l), i.shape.addClass(\"jvm-marker jvm-element\"), i._isImage && i.updateLabelPosition(), n && i._createLabel(i.config), i;\n        }\n        t(i, e);\n        var s = i.prototype;\n        return s.updateLabelPosition = function() {\n            this.label && this.label.set({\n                x: this._labelX * this._map.scale + this._offsets[0] + this._map.transX * this._map.scale + 5 + (this._isImage ? (this.shape.width || 0) / 2 : this.shape.node.r.baseVal.value),\n                y: this._labelY * this._map.scale + this._map.transY * this._map.scale + this._offsets[1]\n            });\n        }, s._createLabel = function(t) {\n            var e = t.index, i = t.map, s = t.label, a = t.labelsGroup, n = t.cx, r = t.cy, o = t.marker, h = t.isRecentlyCreated, l = this.getLabelText(e, s);\n            this._labelX = n / i.scale - i.transX, this._labelY = r / i.scale - i.transY, this._offsets = h && o.offsets ? o.offsets : this.getLabelOffsets(e, s), this.label = i.canvas.createText({\n                text: l,\n                dataIndex: e,\n                x: this._labelX,\n                y: this._labelY,\n                dy: \"0.6ex\"\n            }, i.params.markerLabelStyle, a), this.label.addClass(\"jvm-marker jvm-element\"), h && this.updateLabelPosition();\n        }, i;\n    }(x);\n    y(O, j);\n    var A = function() {\n        function t(t) {\n            void 0 === t && (t = {}), this._options = t, this._map = this._options.map, this._series = this._options.series, this._body = m(\"div\", \"jvm-legend\"), this._options.cssClass && this._body.setAttribute(\"class\", this._options.cssClass), t.vertical ? this._map.legendVertical.appendChild(this._body) : this._map.legendHorizontal.appendChild(this._body), this.render();\n        }\n        return t.prototype.render = function() {\n            var t, e = this._series.scale.getTicks(), i = m(\"div\", \"jvm-legend-inner\");\n            if (this._body.innderHTML = \"\", this._options.title) {\n                var s = m(\"div\", \"jvm-legend-title\", this._options.title);\n                this._body.appendChild(s);\n            }\n            this._body.appendChild(i);\n            for(var a = 0; a < e.length; a++){\n                var n = m(\"div\", \"jvm-legend-tick\"), r = m(\"div\", \"jvm-legend-tick-sample\");\n                switch(this._series.config.attribute){\n                    case \"fill\":\n                        t = e[a].value, /\\.(jpg|gif|png)$/.test(t) ? r.style.background = \"url(\" + e[a].value + \")\" : r.style.background = e[a].value;\n                        break;\n                    case \"stroke\":\n                        r.style.background = e[a].value;\n                        break;\n                    case \"image\":\n                        r.style.background = \"url(\" + (\"object\" == typeof e[a].value ? e[a].value.url : e[a].value) + \") no-repeat center center\", r.style.backgroundSize = \"cover\";\n                }\n                n.appendChild(r);\n                var o = e[a].label;\n                this._options.labelRender && (o = this._options.labelRender(o));\n                var h = m(\"div\", \"jvm-legend-tick-text\", o);\n                n.appendChild(h), i.appendChild(n);\n            }\n        }, t;\n    }(), X = function() {\n        function t(t) {\n            this._scale = t;\n        }\n        var e = t.prototype;\n        return e.getValue = function(t) {\n            return this._scale[t];\n        }, e.getTicks = function() {\n            var t = [];\n            for(var e in this._scale)t.push({\n                label: e,\n                value: this._scale[e]\n            });\n            return t;\n        }, t;\n    }(), Y = function() {\n        function t(t, e, i) {\n            void 0 === t && (t = {}), this._map = i, this._elements = e, this._values = t.values || {}, this.config = t, this.config.attribute = t.attribute || \"fill\", t.attributes && this.setAttributes(t.attributes), \"object\" == typeof t.scale && (this.scale = new X(t.scale)), this.config.legend && (this.legend = new A(v({\n                map: this._map,\n                series: this\n            }, this.config.legend))), this.setValues(this._values);\n        }\n        var e = t.prototype;\n        return e.setValues = function(t) {\n            var e = {};\n            for(var i in t)t[i] && (e[i] = this.scale.getValue(t[i]));\n            this.setAttributes(e);\n        }, e.setAttributes = function(t) {\n            for(var e in t)this._elements[e] && this._elements[e].element.setStyle(this.config.attribute, t[e]);\n        }, e.clear = function() {\n            var t, e = {};\n            for(t in this._values)this._elements[t] && (e[t] = this._elements[t].element.shape.style.initial[this.config.attribute]);\n            this.setAttributes(e), this._values = {};\n        }, t;\n    }();\n    var E = {\n        mill: function(t, e, i) {\n            return {\n                x: this.radius * (e - i) * this.radDeg,\n                y: -this.radius * Math.log(Math.tan((45 + .4 * t) * this.radDeg)) / .8\n            };\n        },\n        merc: function(t, e, i) {\n            return {\n                x: this.radius * (e - i) * this.radDeg,\n                y: -this.radius * Math.log(Math.tan(Math.PI / 4 + t * Math.PI / 360))\n            };\n        },\n        aea: function(t, e, i) {\n            var s = i * this.radDeg, a = 29.5 * this.radDeg, n = 45.5 * this.radDeg, r = t * this.radDeg, o = e * this.radDeg, h = (Math.sin(a) + Math.sin(n)) / 2, l = Math.cos(a) * Math.cos(a) + 2 * h * Math.sin(a), c = h * (o - s), u = Math.sqrt(l - 2 * h * Math.sin(r)) / h, p = Math.sqrt(l - 2 * h * Math.sin(0)) / h;\n            return {\n                x: u * Math.sin(c) * this.radius,\n                y: -(p - u * Math.cos(c)) * this.radius\n            };\n        },\n        lcc: function(t, e, i) {\n            var s = i * this.radDeg, a = e * this.radDeg, n = 33 * this.radDeg, r = 45 * this.radDeg, o = t * this.radDeg, h = Math.log(Math.cos(n) * (1 / Math.cos(r))) / Math.log(Math.tan(Math.PI / 4 + r / 2) * (1 / Math.tan(Math.PI / 4 + n / 2))), l = Math.cos(n) * Math.pow(Math.tan(Math.PI / 4 + n / 2), h) / h, c = l * Math.pow(1 / Math.tan(Math.PI / 4 + o / 2), h), u = l * Math.pow(1 / Math.tan(Math.PI / 4 + 0), h);\n            return {\n                x: c * Math.sin(h * (a - s)) * this.radius,\n                y: -(u - c * Math.cos(h * (a - s))) * this.radius\n            };\n        }\n    };\n    E.degRad = 180 / Math.PI, E.radDeg = Math.PI / 180, E.radius = 6381372;\n    var T = {\n        _setupContainerEvents: function() {\n            var t, e, i = this, s = this, a = !1;\n            this.params.draggable && (S.on(this.container, \"mousemove\", function(i) {\n                if (!a) return !1;\n                s.transX -= (t - i.pageX) / s.scale, s.transY -= (e - i.pageY) / s.scale, s._applyTransform(), t = i.pageX, e = i.pageY;\n            }), S.on(this.container, \"mousedown\", function(i) {\n                return a = !0, t = i.pageX, e = i.pageY, !1;\n            }), S.on(document.body, \"mouseup\", function() {\n                a = !1;\n            })), this.params.zoomOnScroll && S.on(this.container, \"wheel\", function(t) {\n                var e = 75 * ((t.deltaY || -t.wheelDelta || t.detail) >> 10 || 1), a = i.container.getBoundingClientRect(), n = t.pageX - a.left - window.pageXOffset, r = t.pageY - a.top - window.pageYOffset, o = Math.pow(1 + s.params.zoomOnScrollSpeed / 1e3, -1.5 * e);\n                s.tooltip && s._tooltip.hide(), s._setScale(s.scale * o, n, r), t.preventDefault();\n            });\n        },\n        _setupElementEvents: function() {\n            var t, e, i, s = this, a = this.container;\n            S.on(a, \"mousemove\", function(s) {\n                Math.abs(t - s.pageX) + Math.abs(e - s.pageY) > 2 && (i = !0);\n            }), S.delegate(a, \"mousedown\", \".jvm-element\", function(s) {\n                t = s.pageX, e = s.pageY, i = !1;\n            }), S.delegate(a, \"mouseover mouseout\", \".jvm-element\", function(t) {\n                var e = M(s, this, !0), i = s.params.showTooltip;\n                \"mouseover\" === t.type ? (e.element.hover(!0), i && (s._tooltip.text(e.tooltipText), s._tooltip.show(), s._emit(e.event, [\n                    t,\n                    s._tooltip,\n                    e.code\n                ]))) : (e.element.hover(!1), i && s._tooltip.hide());\n            }), S.delegate(a, \"mouseup\", \".jvm-element\", function(t) {\n                var e = M(s, this);\n                if (!i && (\"region\" === e.type && s.params.regionsSelectable || \"marker\" === e.type && s.params.markersSelectable)) {\n                    var a = e.element;\n                    s.params[e.type + \"sSelectableOne\"] && s._clearSelected(e.type + \"s\"), e.element.isSelected ? a.select(!1) : a.select(!0), s._emit(e.event, [\n                        e.code,\n                        a.isSelected,\n                        s._getSelected(e.type + \"s\")\n                    ]);\n                }\n            }), S.delegate(a, \"click\", \".jvm-element\", function(t) {\n                var e = M(s, this), i = e.type, a = e.code;\n                s._emit(\"region\" === i ? k.onRegionClick : k.onMarkerClick, [\n                    t,\n                    a\n                ]);\n            });\n        },\n        _setupZoomButtons: function() {\n            var t = this, e = m(\"div\", \"jvm-zoom-btn jvm-zoomin\", \"&#43;\", !0), i = m(\"div\", \"jvm-zoom-btn jvm-zoomout\", \"&#x2212\", !0);\n            this.container.appendChild(e), this.container.appendChild(i);\n            var s = function(e) {\n                return void 0 === e && (e = !0), function() {\n                    return t._setScale(e ? t.scale * t.params.zoomStep : t.scale / t.params.zoomStep, t._width / 2, t._height / 2, !1, t.params.zoomAnimate);\n                };\n            };\n            S.on(e, \"click\", s()), S.on(i, \"click\", s(!1));\n        },\n        _setupContainerTouchEvents: function() {\n            var t, e, i, s, a, n, r, o = this, h = function(h) {\n                var l, c, u, p, d = h.touches;\n                if (\"touchstart\" == h.type && (r = 0), 1 == d.length) 1 == r && (u = o.transX, p = o.transY, o.transX -= (i - d[0].pageX) / o.scale, o.transY -= (s - d[0].pageY) / o.scale, o._tooltip.hide(), o._applyTransform(), u == o.transX && p == o.transY || h.preventDefault()), i = d[0].pageX, s = d[0].pageY;\n                else if (2 == d.length) if (2 == r) c = Math.sqrt(Math.pow(d[0].pageX - d[1].pageX, 2) + Math.pow(d[0].pageY - d[1].pageY, 2)) / e, o._setScale(t * c, a, n), o._tooltip.hide(), h.preventDefault();\n                else {\n                    var f = o.container.getBoundingClientRect();\n                    l = {\n                        top: f.top + window.scrollY,\n                        left: f.left + window.scrollX\n                    }, a = d[0].pageX > d[1].pageX ? d[1].pageX + (d[0].pageX - d[1].pageX) / 2 : d[0].pageX + (d[1].pageX - d[0].pageX) / 2, n = d[0].pageY > d[1].pageY ? d[1].pageY + (d[0].pageY - d[1].pageY) / 2 : d[0].pageY + (d[1].pageY - d[0].pageY) / 2, a -= l.left, n -= l.top, t = o.scale, e = Math.sqrt(Math.pow(d[0].pageX - d[1].pageX, 2) + Math.pow(d[0].pageY - d[1].pageY, 2));\n                }\n                r = d.length;\n            };\n            S.on(o.container, \"touchstart\", h), S.on(o.container, \"touchmove\", h);\n        },\n        _createRegions: function() {\n            for(var t in this._regionLabelsGroup = this._regionLabelsGroup || this.canvas.createGroup(\"jvm-regions-labels-group\"), this._mapData.paths){\n                var e = new C({\n                    map: this,\n                    code: t,\n                    path: this._mapData.paths[t].path,\n                    style: v({}, this.params.regionStyle),\n                    labelStyle: this.params.regionLabelStyle,\n                    labelsGroup: this._regionLabelsGroup,\n                    label: this.params.labels && this.params.labels.regions\n                });\n                this.regions[t] = {\n                    config: this._mapData.paths[t],\n                    element: e\n                };\n            }\n        },\n        _createLines: function(t, e, i) {\n            void 0 === i && (i = !1);\n            var s = !1, a = !1;\n            for(var n in this.linesGroup = this.linesGroup || this.canvas.createGroup(\"jvm-lines-group\"), t){\n                var r = t[n];\n                for(var o in e){\n                    var h = i ? e[o].config : e[o];\n                    h.name === r.from && (s = this.getMarkerPosition(h)), h.name === r.to && (a = this.getMarkerPosition(h));\n                }\n                !1 !== s && !1 !== a && (this._lines[_(r.from, r.to)] = new L({\n                    index: n,\n                    map: this,\n                    style: v({\n                        initial: this.params.lineStyle\n                    }, {\n                        initial: r.style || {}\n                    }, !0),\n                    x1: s.x,\n                    y1: s.y,\n                    x2: a.x,\n                    y2: a.y,\n                    group: this.linesGroup,\n                    config: r\n                }));\n            }\n        },\n        _createMarkers: function(t, e) {\n            var i = this;\n            void 0 === t && (t = {}), void 0 === e && (e = !1), this._markersGroup = this._markersGroup || this.canvas.createGroup(\"jvm-markers-group\"), this._markerLabelsGroup = this._markerLabelsGroup || this.canvas.createGroup(\"jvm-markers-labels-group\");\n            var s = function() {\n                var s = t[a], n = i.getMarkerPosition(s), r = s.coords.join(\":\");\n                if (!n) return \"continue\";\n                if (e) {\n                    if (Object.keys(i._markers).filter(function(t) {\n                        return i._markers[t]._uid === r;\n                    }).length) return \"continue\";\n                    a = Object.keys(i._markers).length;\n                }\n                var o = new O({\n                    index: a,\n                    map: i,\n                    style: v(i.params.markerStyle, {\n                        initial: s.style || {}\n                    }, !0),\n                    label: i.params.labels && i.params.labels.markers,\n                    labelsGroup: i._markerLabelsGroup,\n                    cx: n.x,\n                    cy: n.y,\n                    group: i._markersGroup,\n                    marker: s,\n                    isRecentlyCreated: e\n                });\n                i._markers[a] && i.removeMarkers([\n                    a\n                ]), i._markers[a] = {\n                    _uid: r,\n                    config: s,\n                    element: o\n                };\n            };\n            for(var a in t)s();\n        },\n        _createSeries: function() {\n            for(var t in this.series = {\n                markers: [],\n                regions: []\n            }, this.params.series)for(var e = 0; e < this.params.series[t].length; e++)this.series[t][e] = new Y(this.params.series[t][e], \"markers\" === t ? this._markers : this.regions, this);\n        },\n        _applyTransform: function() {\n            var t, e, i, s;\n            this._defaultWidth * this.scale <= this._width ? (t = (this._width - this._defaultWidth * this.scale) / (2 * this.scale), i = (this._width - this._defaultWidth * this.scale) / (2 * this.scale)) : (t = 0, i = (this._width - this._defaultWidth * this.scale) / this.scale), this._defaultHeight * this.scale <= this._height ? (e = (this._height - this._defaultHeight * this.scale) / (2 * this.scale), s = (this._height - this._defaultHeight * this.scale) / (2 * this.scale)) : (e = 0, s = (this._height - this._defaultHeight * this.scale) / this.scale), this.transY > e ? this.transY = e : this.transY < s && (this.transY = s), this.transX > t ? this.transX = t : this.transX < i && (this.transX = i), this.canvas.applyTransformParams(this.scale, this.transX, this.transY), this._markers && this._repositionMarkers(), this._lines && this._repositionLines(), this._repositionLabels();\n        },\n        _resize: function() {\n            var t = this._baseScale;\n            this._width / this._height > this._defaultWidth / this._defaultHeight ? (this._baseScale = this._height / this._defaultHeight, this._baseTransX = Math.abs(this._width - this._defaultWidth * this._baseScale) / (2 * this._baseScale)) : (this._baseScale = this._width / this._defaultWidth, this._baseTransY = Math.abs(this._height - this._defaultHeight * this._baseScale) / (2 * this._baseScale)), this.scale *= this._baseScale / t, this.transX *= this._baseScale / t, this.transY *= this._baseScale / t;\n        },\n        _setScale: function(t, e, i, s, a) {\n            var n, r, o, h, l, c, u, p, d, f, m = this, g = 0, v = Math.abs(Math.round(60 * (t - this.scale) / Math.max(t, this.scale)));\n            t > this.params.zoomMax * this._baseScale ? t = this.params.zoomMax * this._baseScale : t < this.params.zoomMin * this._baseScale && (t = this.params.zoomMin * this._baseScale), void 0 !== e && void 0 !== i && (n = t / this.scale, s ? (d = e + this._defaultWidth * (this._width / (this._defaultWidth * t)) / 2, f = i + this._defaultHeight * (this._height / (this._defaultHeight * t)) / 2) : (d = this.transX - (n - 1) / t * e, f = this.transY - (n - 1) / t * i)), a && v > 0 ? (o = this.scale, h = (t - o) / v, l = this.transX * this.scale, u = this.transY * this.scale, c = (d * t - l) / v, p = (f * t - u) / v, r = setInterval(function() {\n                g += 1, m.scale = o + h * g, m.transX = (l + c * g) / m.scale, m.transY = (u + p * g) / m.scale, m._applyTransform(), g == v && (clearInterval(r), m._emit(k.onViewportChange, [\n                    m.scale,\n                    m.transX,\n                    m.transY\n                ]));\n            }, 10)) : (this.transX = d, this.transY = f, this.scale = t, this._applyTransform(), this._emit(k.onViewportChange, [\n                this.scale,\n                this.transX,\n                this.transY\n            ]));\n        },\n        setFocus: function(t) {\n            var e = this;\n            void 0 === t && (t = {});\n            var i, s = [];\n            if (t.region ? s.push(t.region) : t.regions && (s = t.regions), s.length) return s.forEach(function(t) {\n                if (e.regions[t]) {\n                    var s = e.regions[t].element.shape.getBBox();\n                    s && (i = void 0 === i ? s : {\n                        x: Math.min(i.x, s.x),\n                        y: Math.min(i.y, s.y),\n                        width: Math.max(i.x + i.width, s.x + s.width) - Math.min(i.x, s.x),\n                        height: Math.max(i.y + i.height, s.y + s.height) - Math.min(i.y, s.y)\n                    });\n                }\n            }), this._setScale(Math.min(this._width / i.width, this._height / i.height), -(i.x + i.width / 2), -(i.y + i.height / 2), !0, t.animate);\n            if (t.coords) {\n                var a = this.coordsToPoint(t.coords[0], t.coords[1]), n = this.transX - a.x / this.scale, r = this.transY - a.y / this.scale;\n                return this._setScale(t.scale * this._baseScale, n, r, !0, t.animate);\n            }\n        },\n        updateSize: function() {\n            this._width = this.container.offsetWidth, this._height = this.container.offsetHeight, this._resize(), this.canvas.setSize(this._width, this._height), this._applyTransform();\n        },\n        coordsToPoint: function(t, e) {\n            var i = G.maps[this.params.map].projection, s = E[i.type](t, e, i.centralMeridian), a = s.x, n = s.y, r = this.getInsetForPoint(a, n);\n            if (!r) return !1;\n            var o = r.bbox;\n            return a = (a - o[0].x) / (o[1].x - o[0].x) * r.width * this.scale, n = (n - o[0].y) / (o[1].y - o[0].y) * r.height * this.scale, {\n                x: a + this.transX * this.scale + r.left * this.scale,\n                y: n + this.transY * this.scale + r.top * this.scale\n            };\n        },\n        getInsetForPoint: function(t, e) {\n            for(var i = G.maps[this.params.map].insets, s = 0; s < i.length; s++){\n                var a = i[s].bbox, n = a[0], r = a[1];\n                if (t > n.x && t < r.x && e > n.y && e < r.y) return i[s];\n            }\n        },\n        getMarkerPosition: function(t) {\n            var e = t.coords;\n            return G.maps[this.params.map].projection ? this.coordsToPoint.apply(this, e) : {\n                x: e[0] * this.scale + this.transX * this.scale,\n                y: e[1] * this.scale + this.transY * this.scale\n            };\n        },\n        _repositionLines: function() {\n            var t = !1, e = !1;\n            for(var i in this._lines){\n                for(var s in this._markers){\n                    var a = this._markers[s];\n                    a.config.name === this._lines[i].config.from && (t = this.getMarkerPosition(a.config)), a.config.name === this._lines[i].config.to && (e = this.getMarkerPosition(a.config));\n                }\n                !1 !== t && !1 !== e && this._lines[i].setStyle({\n                    x1: t.x,\n                    y1: t.y,\n                    x2: e.x,\n                    y2: e.y\n                });\n            }\n        },\n        _repositionMarkers: function() {\n            for(var t in this._markers){\n                var e = this.getMarkerPosition(this._markers[t].config);\n                !1 !== e && this._markers[t].element.setStyle({\n                    cx: e.x,\n                    cy: e.y\n                });\n            }\n        },\n        _repositionLabels: function() {\n            var t = this.params.labels;\n            if (t) {\n                if (t.regions) for(var e in this.regions)this.regions[e].element.updateLabelPosition();\n                if (t.markers) for(var i in this._markers)this._markers[i].element.updateLabelPosition();\n            }\n        }\n    }, z = function() {\n        function t(t, e) {\n            this.node = this._createElement(t), e && this.set(e);\n        }\n        var e = t.prototype;\n        return e._createElement = function(t) {\n            return document.createElementNS(\"http://www.w3.org/2000/svg\", t);\n        }, e.addClass = function(t) {\n            this.node.setAttribute(\"class\", t);\n        }, e.getBBox = function() {\n            return this.node.getBBox();\n        }, e.set = function(t, e) {\n            if (\"object\" == typeof t) for(var i in t)this.applyAttr(i, t[i]);\n            else this.applyAttr(t, e);\n        }, e.get = function(t) {\n            return this.style.initial[t];\n        }, e.applyAttr = function(t, e) {\n            this.node.setAttribute(t.replace(/[\\w]([A-Z])/g, function(t) {\n                return t[0] + \"-\" + t[1];\n            }).toLowerCase(), e);\n        }, e.remove = function() {\n            g(this.node);\n        }, t;\n    }(), P = function(e) {\n        function i(t, i, s) {\n            var a;\n            return void 0 === s && (s = {}), (a = e.call(this, t, i) || this).isHovered = !1, a.isSelected = !1, a.style = s, a.style.current = {}, a.updateStyle(), a;\n        }\n        t(i, e);\n        var s = i.prototype;\n        return s.setStyle = function(t, e) {\n            var i;\n            \"object\" == typeof t ? v(this.style.current, t) : v(this.style.current, ((i = {})[t] = e, i));\n            this.updateStyle();\n        }, s.updateStyle = function() {\n            var t = {};\n            v(t, this.style.initial), v(t, this.style.current), this.isHovered && v(t, this.style.hover), this.isSelected && (v(t, this.style.selected), this.isHovered && v(t, this.style.selectedHover)), this.set(t);\n        }, i;\n    }(z), D = function(e) {\n        function i(t, i) {\n            return e.call(this, \"text\", t, i) || this;\n        }\n        return t(i, e), i.prototype.applyAttr = function(t, i) {\n            \"text\" === t ? this.node.textContent = i : e.prototype.applyAttr.call(this, t, i);\n        }, i;\n    }(P), I = function(e) {\n        function i(t, i) {\n            return e.call(this, \"image\", t, i) || this;\n        }\n        return t(i, e), i.prototype.applyAttr = function(t, i) {\n            var s;\n            \"image\" === t ? (\"object\" == typeof i ? (s = i.url, this.offset = i.offset || [\n                0,\n                0\n            ]) : (s = i, this.offset = [\n                0,\n                0\n            ]), this.node.setAttributeNS(\"http://www.w3.org/1999/xlink\", \"href\", s), this.width = 23, this.height = 23, this.applyAttr(\"width\", this.width), this.applyAttr(\"height\", this.height), this.applyAttr(\"x\", this.cx - this.width / 2 + this.offset[0]), this.applyAttr(\"y\", this.cy - this.height / 2 + this.offset[1])) : \"cx\" == t ? (this.cx = i, this.width && this.applyAttr(\"x\", i - this.width / 2 + this.offset[0])) : \"cy\" == t ? (this.cy = i, this.height && this.applyAttr(\"y\", i - this.height / 2 + this.offset[1])) : e.prototype.applyAttr.apply(this, arguments);\n        }, i;\n    }(P), R = function(e) {\n        function i(t) {\n            var i;\n            return (i = e.call(this, \"svg\") || this)._container = t, i._defsElement = new z(\"defs\"), i._rootElement = new z(\"g\", {\n                id: \"jvm-regions-group\"\n            }), i.node.appendChild(i._defsElement.node), i.node.appendChild(i._rootElement.node), i._container.appendChild(i.node), i;\n        }\n        t(i, e);\n        var s = i.prototype;\n        return s.setSize = function(t, e) {\n            this.node.setAttribute(\"width\", t), this.node.setAttribute(\"height\", e);\n        }, s.applyTransformParams = function(t, e, i) {\n            this._rootElement.node.setAttribute(\"transform\", \"scale(\" + t + \") translate(\" + e + \", \" + i + \")\");\n        }, s.createPath = function(t, e) {\n            var i = new P(\"path\", t, e);\n            return i.node.setAttribute(\"fill-rule\", \"evenodd\"), this._add(i);\n        }, s.createCircle = function(t, e, i) {\n            var s = new P(\"circle\", t, e);\n            return this._add(s, i);\n        }, s.createLine = function(t, e, i) {\n            var s = new P(\"line\", t, e);\n            return this._add(s, i);\n        }, s.createText = function(t, e, i) {\n            var s = new D(t, e);\n            return this._add(s, i);\n        }, s.createImage = function(t, e, i) {\n            var s = new I(t, e);\n            return this._add(s, i);\n        }, s.createGroup = function(t) {\n            var e = new z(\"g\");\n            return this.node.appendChild(e.node), t && (e.node.id = t), e.canvas = this, e;\n        }, s._add = function(t, e) {\n            return (e = e || this._rootElement).node.appendChild(t.node), t;\n        }, i;\n    }(z), H = function(e) {\n        function s(t) {\n            var s;\n            s = e.call(this) || this;\n            var a = m(\"div\", \"jvm-tooltip\");\n            return s._map = t, s._tooltip = document.body.appendChild(a), s._bindEventListeners(), i(s) || i(s);\n        }\n        t(s, e);\n        var a = s.prototype;\n        return a._bindEventListeners = function() {\n            var t = this;\n            S.on(this._map.container, \"mousemove\", function(e) {\n                if (t._tooltip.classList.contains(\"active\")) {\n                    var i, s, a = (i = t._map.container, s = \"#jvm-regions-group\", Element.prototype.querySelector.call(i, s)).getBoundingClientRect(), n = t._tooltip.getBoundingClientRect(), r = n.height, o = n.width, h = e.clientY <= a.top + r + 5, l = e.pageY - r - 5, c = e.pageX - o - 5;\n                    h && (l += r + 5, c -= 10), e.clientX < a.left + o + 5 && (c = e.pageX + 5 + 2, h && (c += 10)), t.css({\n                        top: l + \"px\",\n                        left: c + \"px\"\n                    });\n                }\n            });\n        }, a.getElement = function() {\n            return this._tooltip;\n        }, a.show = function() {\n            this._tooltip.classList.add(\"active\");\n        }, a.hide = function() {\n            this._tooltip.classList.remove(\"active\");\n        }, a.text = function(t, e) {\n            void 0 === e && (e = !1);\n            var i = e ? \"innerHTML\" : \"textContent\";\n            if (!t) return this._tooltip[i];\n            this._tooltip[i] = t;\n        }, a.css = function(t) {\n            for(var e in t)this._tooltip.style[e] = t[e];\n            return this;\n        }, s;\n    }(x), V = function() {\n        function t(t, e) {\n            var i = t.scale, s = t.values;\n            this._scale = i, this._values = s, this._fromColor = this.hexToRgb(i[0]), this._toColor = this.hexToRgb(i[1]), this._map = e, this.setMinMaxValues(s), this.visualize();\n        }\n        var e = t.prototype;\n        return e.setMinMaxValues = function(t) {\n            for(var e in this.min = Number.MAX_VALUE, this.max = 0, t)(e = parseFloat(t[e])) > this.max && (this.max = e), e < this.min && (this.min = e);\n        }, e.visualize = function() {\n            var t, e = {};\n            for(var i in this._values)t = parseFloat(this._values[i]), isNaN(t) || (e[i] = this.getValue(t));\n            this.setAttributes(e);\n        }, e.setAttributes = function(t) {\n            for(var e in t)this._map.regions[e] && this._map.regions[e].element.setStyle(\"fill\", t[e]);\n        }, e.getValue = function(t) {\n            for(var e, i = \"#\", s = 0; s < 3; s++)i += (1 === (e = Math.round(this._fromColor[s] + (this._toColor[s] - this._fromColor[s]) * ((t - this.min) / (this.max - this.min))).toString(16)).length ? \"0\" : \"\") + e;\n            return i;\n        }, e.hexToRgb = function(t) {\n            var e = 0, i = 0, s = 0;\n            return 4 == t.length ? (e = \"0x\" + t[1] + t[1], i = \"0x\" + t[2] + t[2], s = \"0x\" + t[3] + t[3]) : 7 == t.length && (e = \"0x\" + t[1] + t[2], i = \"0x\" + t[3] + t[4], s = \"0x\" + t[5] + t[6]), [\n                parseInt(e),\n                parseInt(i),\n                parseInt(s)\n            ];\n        }, t;\n    }(), G = function() {\n        function t(e) {\n            var i = this;\n            if (void 0 === e && (e = {}), this.params = v(t.defaults, e, !0), !t.maps[this.params.map]) throw new Error(\"Attempt to use map which was not loaded: \" + e.map);\n            this.regions = {}, this.scale = 1, this.transX = 0, this.transY = 0, this._mapData = t.maps[this.params.map], this._markers = {}, this._lines = {}, this._defaultWidth = this._mapData.width, this._defaultHeight = this._mapData.height, this._height = 0, this._width = 0, this._baseScale = 1, this._baseTransX = 0, this._baseTransY = 0, \"loading\" !== document.readyState ? this._init() : window.addEventListener(\"DOMContentLoaded\", function() {\n                return i._init();\n            });\n        }\n        var e = t.prototype;\n        return e._init = function() {\n            var t = this.params;\n            this.container = f(t.selector), this.container.classList.add(\"jvm-container\"), this.canvas = new R(this.container), this.setBackgroundColor(t.backgroundColor), this._createRegions(), this.updateSize(), this._createLines(t.lines || {}, t.markers || {}), this._createMarkers(t.markers), this._repositionLabels(), this._setupContainerEvents(), this._setupElementEvents(), t.zoomButtons && this._setupZoomButtons(), t.showTooltip && (this._tooltip = new H(this)), t.selectedRegions && this._setSelected(\"regions\", t.selectedRegions), t.selectedMarkers && this._setSelected(\"_markers\", t.selectedMarkers), t.focusOn && this.setFocus(t.focusOn), t.visualizeData && (this.dataVisualization = new V(t.visualizeData, this)), t.bindTouchEvents && (\"ontouchstart\" in window || window.DocumentTouch && document instanceof DocumentTouch) && this._setupContainerTouchEvents(), t.series && (this.container.appendChild(this.legendHorizontal = m(\"div\", \"jvm-series-container jvm-series-h\")), this.container.appendChild(this.legendVertical = m(\"div\", \"jvm-series-container jvm-series-v\")), this._createSeries()), this._emit(k.onLoaded, [\n                this\n            ]);\n        }, e.setBackgroundColor = function(t) {\n            this.container.style.backgroundColor = t;\n        }, e.getSelectedRegions = function() {\n            return this._getSelected(\"regions\");\n        }, e.clearSelectedRegions = function() {\n            this._clearSelected(\"regions\");\n        }, e.getSelectedMarkers = function() {\n            return this._getSelected(\"_markers\");\n        }, e.clearSelectedMarkers = function() {\n            this._clearSelected(\"_markers\");\n        }, e.addMarkers = function(t) {\n            if (Array.isArray(t)) return this._createMarkers(t, !0);\n            this._createMarkers([\n                t\n            ], !0);\n        }, e.removeMarkers = function(t) {\n            var e = this;\n            t || (t = Object.keys(this._markers)), t.forEach(function(t) {\n                e._markers[t].element.remove(), delete e._markers[t];\n            });\n        }, e.addLine = function(t, e, i) {\n            void 0 === i && (i = {}), console.warn(\"`addLine` method is deprecated, please use `addLines` instead.\"), this._createLines([\n                {\n                    from: t,\n                    to: e,\n                    style: i\n                }\n            ], this._markers, !0);\n        }, e.addLines = function(t) {\n            var e = this._getLinesAsUids();\n            Array.isArray(t) || (t = [\n                t\n            ]), this._createLines(t.filter(function(t) {\n                return !(e.indexOf(_(t.from, t.to)) > -1);\n            }), this._markers, !0);\n        }, e.removeLines = function(t) {\n            var e = this;\n            (t = Array.isArray(t) ? t.map(function(t) {\n                return _(t.from, t.to);\n            }) : this._getLinesAsUids()).forEach(function(t) {\n                e._lines[t].dispose(), delete e._lines[t];\n            });\n        }, e.removeLine = function(t, e) {\n            console.warn(\"`removeLine` method is deprecated, please use `removeLines` instead.\");\n            var i = _(t, e);\n            this._lines.hasOwnProperty(i) && (this._lines[i].element.remove(), delete this._lines[i]);\n        }, e.reset = function() {\n            for(var t in this.series)for(var e = 0; e < this.series[t].length; e++)this.series[t][e].clear();\n            this.legendHorizontal && (g(this.legendHorizontal), this.legendHorizontal = null), this.legendVertical && (g(this.legendVertical), this.legendVertical = null), this.scale = this._baseScale, this.transX = this._baseTransX, this.transY = this._baseTransY, this._applyTransform(), this.clearSelectedMarkers(), this.clearSelectedRegions(), this.removeMarkers();\n        }, e.destroy = function(t) {\n            var e = this;\n            void 0 === t && (t = !0), S.flush(), this._tooltip.dispose(), this._emit(k.onDestroyed), t && Object.keys(this).forEach(function(t) {\n                try {\n                    delete e[t];\n                } catch (t) {}\n            });\n        }, e.extend = function(e, i) {\n            if (\"function\" == typeof this[e]) throw new Error(\"The method [\" + e + \"] does already exist, please use another name.\");\n            t.prototype[e] = i;\n        }, e._emit = function(t, e) {\n            for(var i in k)k[i] === t && \"function\" == typeof this.params[i] && this.params[i].apply(this, e);\n        }, e._getSelected = function(t) {\n            var e = [];\n            for(var i in this[t])this[t][i].element.isSelected && e.push(i);\n            return e;\n        }, e._setSelected = function(t, e) {\n            var i = this;\n            e.forEach(function(e) {\n                i[t][e] && i[t][e].element.select(!0);\n            });\n        }, e._clearSelected = function(t) {\n            var e = this;\n            this._getSelected(t).forEach(function(i) {\n                e[t][i].element.select(!1);\n            });\n        }, e._getLinesAsUids = function() {\n            return Object.keys(this._lines);\n        }, t;\n    }();\n    G.maps = {}, G.defaults = {\n        map: \"world\",\n        backgroundColor: \"transparent\",\n        draggable: !0,\n        zoomButtons: !0,\n        zoomOnScroll: !0,\n        zoomOnScrollSpeed: 3,\n        zoomMax: 12,\n        zoomMin: 1,\n        zoomAnimate: !0,\n        showTooltip: !0,\n        zoomStep: 1.5,\n        bindTouchEvents: !0,\n        lineStyle: {\n            stroke: \"#808080\",\n            strokeWidth: 1,\n            strokeLinecap: \"round\"\n        },\n        markersSelectable: !1,\n        markersSelectableOne: !1,\n        markerStyle: {\n            initial: {\n                r: 7,\n                fill: \"#374151\",\n                fillOpacity: 1,\n                stroke: \"#FFF\",\n                strokeWidth: 5,\n                strokeOpacity: .5\n            },\n            hover: {\n                fill: \"#3cc0ff\",\n                cursor: \"pointer\"\n            },\n            selected: {\n                fill: \"blue\"\n            },\n            selectedHover: {}\n        },\n        markerLabelStyle: {\n            initial: {\n                fontFamily: \"Verdana\",\n                fontSize: 12,\n                fontWeight: 500,\n                cursor: \"default\",\n                fill: \"#374151\"\n            },\n            hover: {\n                cursor: \"pointer\"\n            },\n            selected: {},\n            selectedHover: {}\n        },\n        regionsSelectable: !1,\n        regionsSelectableOne: !1,\n        regionStyle: {\n            initial: {\n                fill: \"#dee2e8\",\n                fillOpacity: 1,\n                stroke: \"none\",\n                strokeWidth: 0\n            },\n            hover: {\n                fillOpacity: .7,\n                cursor: \"pointer\"\n            },\n            selected: {\n                fill: \"#9ca3af\"\n            },\n            selectedHover: {}\n        },\n        regionLabelStyle: {\n            initial: {\n                fontFamily: \"Verdana\",\n                fontSize: \"12\",\n                fontWeight: \"bold\",\n                cursor: \"default\",\n                fill: \"#35373e\"\n            },\n            hover: {\n                cursor: \"pointer\"\n            }\n        }\n    }, Object.assign(G.prototype, T);\n    var B = function() {\n        function t(t) {\n            if (void 0 === t && (t = {}), !t.selector) throw new Error(\"Selector is not given.\");\n            return new G(t);\n        }\n        return t.addMap = function(t, e) {\n            G.maps[t] = e;\n        }, t;\n    }();\n    return window.jsVectorMap = B;\n});\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsvectormap/dist/js/jsvectormap.min.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/jsvectormap/dist/css/jsvectormap.css":
/*!***********************************************************!*\
  !*** ./node_modules/jsvectormap/dist/css/jsvectormap.css ***!
  \***********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__)\n/* harmony export */ });\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (\"0dc45d3c2ca5\");\nif (false) {}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvanN2ZWN0b3JtYXAvZGlzdC9jc3MvanN2ZWN0b3JtYXAuY3NzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQSxpRUFBZSxjQUFjO0FBQzdCLElBQUksS0FBVSxFQUFFLEVBQXVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZnJlZS1uZXh0anMtYWRtaW4tZGFzaGJvYXJkLy4vbm9kZV9tb2R1bGVzL2pzdmVjdG9ybWFwL2Rpc3QvY3NzL2pzdmVjdG9ybWFwLmNzcz8yNjJmIl0sInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBkZWZhdWx0IFwiMGRjNDVkM2MyY2E1XCJcbmlmIChtb2R1bGUuaG90KSB7IG1vZHVsZS5ob3QuYWNjZXB0KCkgfVxuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/jsvectormap/dist/css/jsvectormap.css\n");

/***/ })

};
;